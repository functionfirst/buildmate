Imports System.Web
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Data.SqlClient
Imports System.Data
Imports System.Web.Script.Serialization
Imports System.Web.ClientServices.Providers
Imports System.Web.Script.Services
Imports Newtonsoft.Json

' To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line.
<System.Web.Script.Services.ScriptService()> _
<WebService(Namespace:="http://tempuri.org/")> _
<WebServiceBinding(ConformsTo:=WsiProfiles.BasicProfile1_1)> _
<Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()> _
Public Class WebService
    Inherits System.Web.Services.WebService

    <WebMethod()> _
    Public Function HelloWorld() As String
        Return "Hello world"
    End Function

    <WebMethod()> _
    Public Function HelloWorldByUser(user As String, pwd As String) As String
        Return "Hello world"
    End Function

    <WebMethod()> _
    Public Function HelloWorldByToken(authToken As String) As String
        Return "Hello World"
    End Function

    'Private Function GetDataSet(strSQL As String) As DataSet
    '    ' 1. create a connection
    '    Dim myConnection As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("LocalSqlServer").ConnectionString)

    '    ' 2. create the command object, passing in the sql string
    '    Dim myCommand As New SqlCommand(strSQL, myConnection)

    '    myConnection.Open()

    '    ' 3. create the DataAdapter
    '    Dim myDataAdapter As New SqlDataAdapter
    '    myDataAdapter.SelectCommand = myCommand

    '    ' 4. populate the dataset and close the connection
    '    Dim myDataset As New DataSet
    '    myDataAdapter.Fill(myDataset)
    '    myConnection.Close()

    '    ' return the dataset
    '    Return myDataset
    'End Function

    'Private Function AuthenticateUser(strUser As String, strPwd As String) As String
    '    ' validate the user against the membership framework user store
    '    If Membership.ValidateUser(strUser, strPwd) Then
    '        ' log the user on the site

    '        FormsAuthentication.SetAuthCookie(strUser, False)
    '        Return True
    '    End If

    '    Return False
    'End Function

    '<WebMethod()> _
    'Public Function Login(strUser As String, strPwd As String) As Boolean
    '    Dim strRole As String = AuthenticateUser(strUser, strPwd)
    '    If Not strRole Is Nothing Then
    '        ' issue authentication key to the client
    '        FormsAuthentication.SetAuthCookie(strUser, False)
    '        Return True
    '    Else
    '        Return False
    '    End If
    'End Function

    '<WebMethod()> _
    'Public Sub logOut()
    '    ' deprive client of the authentication key
    '    FormsAuthentication.SignOut()
    'End Sub

    '<WebMethod()> _
    '<ScriptMethod(ResponseFormat := ResponseFormat.Json, XmlSerializeString := False, UseHttpGet := True)> _
    'Public Function getProjects() As String
    '    Dim projects As DataSet = GetDataSet("SELECT id, projectName FROM Project ORDER BY projectName")

    '    ' create a multi-dimensional jagged array
    '    Dim jaggedArray As String()() = New String(projects.Tables(0).Rows.Count)() {}

    '    Dim i As Integer = 0

    '    For Each rs As DataRow In projects.Tables(0).Rows
    '        jaggedArray(i) = New String() {rs("id").ToString, rs("projectName").ToString}
    '        i += 1
    '    Next

    '    ' return as JSON
    '    Dim js As JavaScriptSerializer = New JavaScriptSerializer()
    '    Dim strJSON As String = js.Serialize(jaggedArray)
    '    Return strJSON
    'End Function


    <WebMethod(Description:="Get the last notification")> _
    <ScriptMethod(ResponseFormat:=ResponseFormat.Json, XmlSerializeString:=True, UseHttpGet:=True)> _
    Public Function getLastNotification(userId As Guid) As String
        Dim myConnection As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("LocalSqlServer").ConnectionString)
        Dim myCommand As New SqlCommand("getUserNotificationsByUser", myConnection)
        myCommand.CommandType = CommandType.StoredProcedure
        myCommand.Parameters.AddWithValue("userId", userId)

        myConnection.Open()
        Dim myDataAdapter As New SqlDataAdapter
        myDataAdapter.SelectCommand = myCommand

        Dim myDataset As New DataSet
        myDataAdapter.Fill(myDataset)
        myConnection.Close()

        ' create a multi-dimensional jagged array
        'Dim jaggedArray As String()() = New String(myDataset.Tables(0).Rows.Count - 1)() {}

        Dim notifications As New List(Of Notification)

        Dim i As Integer = 0
        For Each rs As DataRow In myDataset.Tables(0).Rows
            Dim notification As Notification = New Notification
            notification.id = 12 'rs("id")

            notification.title = "test" ' rs("title")
            notifications.Add(notification)
            'jaggedArray(i) = New String() {rs("id").ToString(), rs("title").ToString(), rs("description").ToString()}
            i = i + 1
        Next

        ' return JSON data
        Dim js As New JavaScriptSerializer()
        Dim strJSON = js.Serialize(notifications)
        'strJSON += js.Serialize(notifications)

        'Dim js As New JavaScriptSerializer()
        'Dim strJSON As String = js.Serialize(jaggedArray)
        Return strJSON
    End Function


    <WebMethod()> _
    <ScriptMethod(ResponseFormat:=ResponseFormat.Json, XmlSerializeString:=True, UseHttpGet:=True)> _
    Public Function setNotificationAsRead(userId As Guid, id As Integer) As String
        Dim myConnection As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("LocalSqlServer").ConnectionString)
        myConnection.Open()

        Dim myCommand As New SqlCommand("setNotificationAsRead", myConnection)
        myCommand.CommandType = CommandType.StoredProcedure
        myCommand.Parameters.AddWithValue("userId", userId)
        myCommand.Parameters.AddWithValue("id", id)

        Dim myDataAdapter As SqlDataAdapter = New SqlDataAdapter(myCommand)
        Dim dt As DataTable = New DataTable
        myDataAdapter.Fill(dt)
        myConnection.Close()

        Return id
    End Function

    Public Class weekData
        ' week number
        ' project count
    End Class

    '<WebMethod()> _
    'Public Function getProjectAnalysis(userId As Guid) As String
    '    Dim myConnection As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("LocalSqlServer").ConnectionString)
    '    Dim myCommand As New SqlCommand("getProjectAnalysis", myConnection)

    '    myCommand.CommandType = CommandType.StoredProcedure
    '    myCommand.Parameters.AddWithValue("userId", userId)

    '    myConnection.Open()
    '    Dim myDataAdapter As New SqlDataAdapter
    '    myDataAdapter.SelectCommand = myCommand

    '    Dim myDataset As New DataSet
    '    myDataAdapter.Fill(myDataset)
    '    myConnection.Close()

    '    ' create a multi-dimensional jagged array
    '    Dim jaggedArray As String()() = New String(myDataset.Tables(0).Rows.Count)() {}
    '    Dim i As Integer = 0

    '    For Each rs As DataRow In myDataset.Tables(0).Rows
    '        jaggedArray(i) = New String() {rs("status").ToString, rs("totalCount").ToString, rs("totalValue").ToString}
    '        i += 1
    '    Next

    '    ' return as JSON
    '    Dim js As JavaScriptSerializer = New JavaScriptSerializer()
    '    Dim strJSON As String = js.Serialize(jaggedArray)
    '    Return strJSON
    'End Function

    '<WebMethod()> _
    'Public Function getMsg() As String
    '    Dim s As String = "Authenticated: " + Context.User.Identity.IsAuthenticated.ToString() + vbCrLf + _
    '       "FormsCookieName: " + FormsAuthentication.FormsCookieName + vbCrLf + _
    '       "User name: " + Context.User.Identity.Name + vbCrLf + _
    '       "Is in role 'silan's role': " + Context.User.IsInRole("silan's role").ToString() + vbCrLf + _
    '       "Is in role 'yang's role': " + Context.User.IsInRole("yang's role").ToString()

    '    '  FormsAuthentication.SignOut()

    '    Dim js As JavaScriptSerializer = New JavaScriptSerializer()
    '    Dim strJSON As String = js.Serialize(s)
    '    Return strJSON

    '    Return s
    'End Function

    <WebMethod()> _
    Public Function GetTaskData(pid As Integer) As String
        'If Not User.Identity.IsAuthenticated Then
        '    Return False
        'End If

        Dim myConnection As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("LocalSqlServer").ConnectionString)
        Dim myCommand As New SqlCommand("getTaskDataWS", myConnection)
        myCommand.CommandType = CommandType.StoredProcedure
        myCommand.Parameters.AddWithValue("pid", pid)

        myConnection.Open()
        Dim myDataAdapter As New SqlDataAdapter
        myDataAdapter.SelectCommand = myCommand

        Dim myDataset As New DataSet
        myDataAdapter.Fill(myDataset)
        myConnection.Close()

        Dim tasks As New List(Of Task)

        Dim i As Integer = 0
        For Each rs As DataRow In myDataset.Tables(0).Rows
            Dim task As Task = New Task
            task.id = rs("id").ToString()
            task.name = rs("id").ToString()
            tasks.Add(task)
            i = i + 1
        Next

        ' return JSON data
        Dim js As New JavaScriptSerializer()
        Dim strJSON = js.Serialize(tasks)
        Return strJSON
    End Function
End Class

Public Class Task
    Private taskId As Integer
    Private taskName As String

    Property id As integer
        Get
            Return taskId
        End Get
        Set(value As Integer)
            taskId = id
        End Set
    End Property

    Property name As String
        Get
            Return taskName
        End Get
        Set(value As String)
            taskName = name
        End Set
    End Property
End Class

Public Class Notification
    Private notificationId As Integer
    Private notificationTitle As String

    Property id As Integer
        Get
            Return notificationId
        End Get
        Set(value As Integer)
            notificationId = id
        End Set
    End Property

    Property title As String
        Get
            Return notificationTitle
        End Get
        Set(value As String)
            notificationTitle = title
        End Set
    End Property
End Class